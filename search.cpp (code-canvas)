#include <iostream>
#include<vector>
#include<fstream>
#include<string>
#include<map>
using namespace std;

vector<int> lpss(string pat){
int n=pat.size();
vector<int> lps;
lps.push_back(0);
int j=0;
for(int i=1;i<n;i++){
    while(j>0 && pat[i]!=pat[j]){
        j=lps[j-1];
        }
    if(pat[i]==pat[j])j++;
    lps.push_back(j);
    }
return lps;
}

vector<int> kmp(string txt,string pat){
int i=0,j=0;
int m=txt.size();
int n=pat.size();
vector<int> res;
vector<int> lps=lpss(pat);
while(i<m){
    if(pat[j]==txt[i]){
        i++;
        j++;
        }
    if(j==n){
        res.push_back(i-j);
        j=lps[j-1];
        }
    else if(i<m && pat[j]!=txt[i]){
        if(j>0)j=lps[j-1];
        else i++;
        }
}
 return res;
}


void searchInFile(const string& filePath,const string& query){
       ifstream file(filePath);
       string line;
       if(!file.is_open()){
        cerr<<"unable to open the file : "<<filePath<<endl;
        return; 
       }
       int linenum=0;
       vector<pair<int,int>>results; 
       while(getline(file,line)){
        linenum++;
        vector<int> indexes=kmp(line,query);
        for(auto it:indexes){
            results.emplace_back(linenum,it);
            }
       }
    for(auto it:results){
        cout<<it.first<<" "<<it.second<<endl;
    }
}

int main(int argc, char *argv[]){
   if(argc!=3){
    cerr<<"Usage : "<<argv[0]<<" <file_path> <query_string> "<<endl;
   }
   string filePath=argv[1];
   string query=argv[2];

   searchInFile(filePath,query);
    return 0;
}
